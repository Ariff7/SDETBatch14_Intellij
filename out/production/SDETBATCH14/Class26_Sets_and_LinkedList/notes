Collection Frameworks: Collection framework is collection of multiple classes and interfaces which help us store
 and process the data more efficiently and easily.Provides ready-made methods that we can just use.

Why should we use Collections Framework?
         1.) its flexible, we dont need to provide size(no limit of size) , unlike an array
         2.) It's dynamic-(all the classes can increase/decrease their size at run time)
         3.) There are already built-in methods to perform common tasks
         4.) pre-built data structures(itâ€™s a way of retrieving and storing the data in a special way to serve a specific purpose)-

DisAdvantges-
           1.) No primitive is allowed(To use primitive we need Wrapper classes which occupy 5 times more memory than a primitive

                int num=10;  //4 memory locations
                Integer num1=10;   //16 memory locations

            2.) It's slower/takes longer to process bc it takes more memory( more data, means more work for your computer

What is Wrapper Class??
             -Are object types for all the primitive types

Why should we learn bout Wrapper Types?
     1.) Collection Framework only supports wrapper types
     2.) There are already built-in methods to perform common tasks

  DisAdvantges-
    1.) We can't use primitive data types, we have to use wrpper classes which occupy 4 times more memory than a primitive

                int num=10;  /4 memory locations
                Integer num1=10;   //16 memory locations

      Wrapper -

     Boxing:
         Converting a primitive to its corresponding wrapper type by manually calling methods.
         int pnum=10;
         Integer wnum=new Integer(pnum);

     AutoBoxing:
         conversion from primitive to a wrapper type but here we don't need to call any methods explicitly.
          int pnum=10;
          Integer wnum=pnum;

     Unboxing:
         converting a wrapper to a primitive by calling a method.
         Integer wnum=new Integer(10);
         int pnum=wnum.intValue();

     AutoUnboxing:
         converting a wrapper to a primitive without calling any methods.
         Integer wnum=new Integer(10);
         int pnum=wnum;

     ArrayList Class:
         it is a classes in collections framework that allows us to store data like an array.
         some common methods from this class are 1) add() 2) remove 3) contains 4) size().

     Iterator:
         its a mechanism that allows us to iterate and delete data from any class in collections framework.
         it has hasNext() next() remove().

     why we should learn about Iterator?
         Because loops are not safe when we perform an operation that can change the size of a data structure.
     ArrayList Vs LinkedList
         Both of the classes implement the list interface which means both of them will have same methods.

     ArrayList:
         uses an array behind the scenes to store the data.
         we should use arrayList when we are retrieving the data most of the time and not inserting the data in the start or in-between
         if we have to shift the data.
         to the list.

     LinkedList:
         Linked-list does not store the data in consecutive memory locations that's why it is easier to insert and remove the data from anywhere
         in a list.
         if you are going to manipulate the data(shifting of elements) always use linked-list.

     if most of the time you use add or remove method then use -----linkedList.
     if most of the time you use get method use ---ArrayList.

     Sets




